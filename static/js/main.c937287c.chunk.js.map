{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","bill","setBill","tipPercentage","setTipPercentage","numberOfPeople","setNumberOfPeople","tipAmount","setTipAmount","total","setTotal","activeButton","setActiveButton","useEffect","calculate","calculateTipAmount","Number","calculateTotal","handleTipPercentage","e","target","value","id","console","log","handleFormat","Intl","NumberFormat","style","currency","className","type","placeholder","onChange","onClick","isFinite","format","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c937287c.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport './App.sass';\n\nfunction App() {\n  const [bill, setBill] = useState(\"\")\n  const [tipPercentage, setTipPercentage] = useState(0)\n  const [numberOfPeople, setNumberOfPeople] = useState(1)\n  const [tipAmount, setTipAmount] = useState(0)\n  const [total, setTotal] = useState(0)\n  const [activeButton, setActiveButton] = useState(\"\")\n  \n  useEffect(() => {\n    calculate()\n  }, [bill, tipPercentage, numberOfPeople])\n\n  // Change bill amount on input change\n  const handleBill = (e) => {\n    setBill(e.target.value)\n  }\n\n  // Change tip percentage on input change\n  const handleCustomTipPercentage = (e) => {\n    setTipPercentage(e.target.value)\n    setActiveButton(e.target.id)\n  }\n\n  // Change number of people on input change\n  const handleNumberOfPeople = (e) => {\n    setNumberOfPeople(e.target.value)\n  }\n\n  // Calculate tip amount and total\n  const calculate = () => {\n    const calculateTipAmount = (Number(bill) * (tipPercentage / 100)) / numberOfPeople\n    const calculateTotal = (Number(bill) / numberOfPeople) + calculateTipAmount\n\n    setTipAmount(calculateTipAmount)\n    setTotal(calculateTotal)\n  }\n\n  const handleTipPercentage = (e) => {\n    setTipPercentage(e.target.value)\n    setActiveButton(e.target.id)\n  }\n\n  // Reset values\n  const handleReset = () => {\n    setBill(\"\")\n    setTipPercentage(null)\n    setNumberOfPeople(1)\n    setActiveButton(null)\n  }\n\n  console.log(numberOfPeople);\n\n\n  // Format number as currency\n  const handleFormat = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' })\n\n  return (\n    <div className=\"app\">\n      <div className=\"mainContainer\">\n\n      <div className=\"inputContainer\">\n        <div className=\"billContainer\">\n          <h4 className=\"title\">Bill</h4>\n          <input className=\"input\" type=\"number\" placeholder=\"0\" value={bill} onChange={handleBill} />\n        </div>\n        <div className=\"tip\">\n          <h4 className=\"title\">Select Tip %</h4>\n          <div className=\"tipPercentage\">\n            <button className={activeButton === \"a\" ? \"button active\" : \"button\"} id=\"a\" value={5} onClick={handleTipPercentage}>5%</button>\n            <button className={activeButton === \"b\" ? \"button active\" : \"button\"} id=\"b\" value={10} onClick={handleTipPercentage}>10%</button>\n            <button className={activeButton === \"c\" ? \"button active\" : \"button\"} id=\"c\" value={15} onClick={handleTipPercentage}>15%</button>\n            <button className={activeButton === \"d\" ? \"button active\" : \"button\"} id=\"d\" value={25} onClick={handleTipPercentage}>25%</button>\n            <button className={activeButton === \"e\" ? \"button active\" : \"button\"} id=\"e\" value={50} onClick={handleTipPercentage}>50%</button>\n            <input className={activeButton === \"f\" ? \"button custom\" : \"button custom\"} id=\"f\" type=\"number\" placeholder=\"Custom\" value={activeButton === \"f\" ? tipPercentage : \"\"} onChange={handleCustomTipPercentage} onClick={handleTipPercentage} />\n          </div>\n          <div className=\"numberOfPeople\">\n            <div className=\"\">\n              <h4 className=\"title\">Number of people</h4>\n              <p className={numberOfPeople === '0' ? \"show\" : \"hide\"}>Can't be zero</p>\n            </div>\n            {/* <input className=\"input\" type=\"number\" placeholder=\"1\" value={numberOfPeople} onChange={handleNumberOfPeople} /> */}\n            <input className={numberOfPeople === '0' ? \"input show\" : \"input\"} type=\"number\" placeholder=\"1\" value={numberOfPeople} onChange={handleNumberOfPeople} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"outputContainer\">\n        <div className=\"tipAmount\">\n          <div className=\"flex\">\n            <h4 className=\"title\">Tip Amount</h4>\n            <p className=\"person\">/ person</p>\n          </div>\n          <div className=\"number\">\n            {/* isFinite returns false if the number is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN */}\n            <h1>{isFinite(tipAmount) ? handleFormat.format(tipAmount) : handleFormat.format(0)}</h1>\n          </div>\n        </div>\n        <div className=\"tipAmount\">\n          <div className=\"flex\">\n            <h4 className=\"title\">Total</h4>\n            <p className=\"person\">/ person</p>\n          </div>\n          <div className=\"number\">\n            {/* isFinite returns false if the number is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN */}\n            <h1>{isFinite(total) ? handleFormat.format(total) : handleFormat.format(0)}</h1>\n          </div>\n        </div>\n          <button className=\"reset\" onClick={handleReset}>RESET</button>\n      </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}